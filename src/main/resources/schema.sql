CREATE TABLE IF NOT EXISTS mpa_rating (
    id_mpa_rating INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name varchar NOT NULL);

CREATE TABLE IF NOT EXISTS model_film(
    film_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    name varchar(255) NOT NULL,
    description varchar(200),
    releaseDate date NOT NULL,
    duration INTEGER,
    mpaRating_rating INTEGER REFERENCES mpa_rating (id_mpa_rating));

CREATE TABLE IF NOT EXISTS genre_directory(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar NOT NULL);

CREATE TABLE IF NOT EXISTS films_genre(
    film_id INTEGER REFERENCES model_film (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genre_directory(id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT id_films_genre UNIQUE (film_id, genre_id));

CREATE TABLE IF NOT EXISTS model_user(
    user_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    email varchar NOT NULL,
   login varchar NOT NULL,
    name varchar,
    birthday date NOT NULL
    CONSTRAINT wrong_birthday_date CHECK (birthday < CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS users_friends(
    --ID_USERS_FRIENDS int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER REFERENCES model_user(user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES model_user(user_id) ON DELETE CASCADE,
    status boolean NOT NULL DEFAULT false,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT id_users_friends UNIQUE (user_id, friend_id)
);
CREATE TABLE IF NOT EXISTS film_likes(
    film_id INTEGER REFERENCES model_film(film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES model_user(user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT id_film_likes UNIQUE (film_id, user_id)
);
